a) Для чего нужен Handler? Что с помощью него можно делать? Как он работает?
Handler - это механизм, который позволяет работать с очередью сообщений. Он привязан к конкретному потоку (thread) и работает с его очередью.

Handler может использоваться для планирования выполнения кода в некоторый момент в будущем. Также класс может использоваться для передачи кода, 
который должен выполняться в другом программном потоке.

В Android к потоку (thread) может быть привязана очередь сообщений. 
Мы можем помещать туда сообщения, а система будет за очередью следить и отправлять сообщения на обработку.

b) Как устроены корутины? В чем плюсы корутин? Какие есть минусы?

По сути корутина представляет блок кода, который может выполняться параллельно с остальным кодом. 
А базовая функциональность, связанная с корутинами, сосредоточена в библиотеке.
Библиотека с корутинами предоставляет понятный высокоуровневый API, который позволяет нам быстро начать работу. 
Единственный модификатор, который нужно выучить, это suspend. Он используется в качестве дополнительного модификатора у методов, чтобы пометить их как прерываемые.

Плюсы корутин:
1. Корутина не привязана к конкретному потоку. Она может быть приостановить выполнение в одном потоке, а возобновить выполнение в другом.
2. Все задачи связаны с определенным scope
3. Простое использование

Минусы:
1. Невозможность ускорить сложные вычисления

c) Как работает Flow под капотом? В каких случаях его удобно использовать?

Flow — это класс, который может возвращать несколько объектов по очереди или сразу. 
Ключевое слово тут «несколько»: это главное его отличие от suspend function, которая возвращает один объект и завершается.
Flow работает на основе корутин и представляет собой поток данных, которые можно обрабатывать асинхронно.
В работу Flow вовлечены три объекта:

Producer — производит (создает, испускает) данные в виде потока. Данные передаются в отдельном потоке благодаря корутинам.
Intermediary (Посредник) — класс или классы, которые могут модифицировать или изменять данные, произведенные Producer’ом. 
Обычно это какие-то вспомогательные классы или так называемые мапперы. Наличие посредников не обязательно, если данные не нужно модифицировать или переводить их из одного типа в другой.
Consumer — получатель данных, произведённых Producer’ом.

Для примера, Flow гораздо удобнее, если вы подписываетесь на постоянные уведомления от вашего GPS или на получение сообщений в чате.
